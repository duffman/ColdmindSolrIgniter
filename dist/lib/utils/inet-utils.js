'use strict';Object.defineProperty(exports,'__esModule',{value:true});const logger_1=require('./logger');const http=require('http');const https=require('https');const request=require('request');var UrlType;(function(UrlType){UrlType[UrlType['Unknown']=0]='Unknown';UrlType[UrlType['Http']=1]='Http';UrlType[UrlType['Https']=2]='Https';}(UrlType=exports.UrlType||(exports.UrlType={})));class InetUtils{static getHttps(url){return new Promise((resolve,reject)=>{https.get(url,res=>{let source='';res.setEncoding('utf8');res.on('data',buffer=>{source+=buffer.toString();});res.on('end',()=>{resolve(source);});}).on('error',e=>{reject(e);});});}static getHttp(url){return new Promise((resolve,reject)=>{http.get(url,res=>{let source='';res.setEncoding('utf8');res.on('data',buffer=>{source+=buffer.toString();});res.on('end',()=>{resolve(source);});}).on('error',e=>{reject(e);});});}static getUrlType(url){let result=UrlType.Unknown;url=url.toLowerCase();let pUrl=url.substr(0,url.indexOf('://'));switch(pUrl){case'http':result=UrlType.Http;break;case'https':result=UrlType.Https;break;}return result;}static urlTypeToString(urlType){let result='Unknown';switch(urlType){case UrlType.Http:result='UrlType.Http';break;case UrlType.Https:result='UrlType.Https';break;}return result;}static getUrlContents(url){let scope=this;let urlType=InetUtils.getUrlType(url);let contents;return new Promise((resolve,reject)=>{let urlTypeStr=InetUtils.urlTypeToString(urlType);if(urlType==UrlType.Http){InetUtils.getHttp(url).then(contents=>{resolve(contents);}).catch(err=>{logger_1.Log.error('getUrlContents (HTTP) : '+err.code+' :: '+url,null);reject(err);});}else if(urlType==UrlType.Https){InetUtils.getHttps(url).then(contents=>{resolve(contents);}).catch(err=>{logger_1.Log.error('getUrlContents (HTTPS) : '+err.code+' :: '+url,null);reject(err);});}else{let error=new Error('Unknown protocol');reject(error);}});}static conntionRefused(err){return err!=null&&err.code=='ECONNREFUSED';}}exports.InetUtils=InetUtils;