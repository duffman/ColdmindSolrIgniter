'use strict';Object.defineProperty(exports,'__esModule',{value:true});const solr_http_request_1=require('./core/solr-http-request');const types_1=require('./types');const types_2=require('./types');const const_1=require('./const');const logger_1=require('./utils/logger');const doc_parser_1=require('./doc-parser');const solr_transaction_1=require('./core/solr-transaction');class SolrClient{constructor(protocol=types_2.ServerProtocol.HTTP,host=const_1.Const.LOCALHOST,port=const_1.Const.DEFAULT_PORT){this.protocol=protocol;this.host=host;this.port=port;}use(collection){console.log('USE COLLECTION ::',collection);this.collection=collection;}compileUrl(){let url=this.protocol+this.host+':'+this.port+const_1.Const.URL_SLASH+'solr/';if(this.collection){url=url+this.collection+const_1.Const.URL_SLASH;}console.log('URL >>>',url);return url;}showDebug(){let url=this.compileUrl();logger_1.Log.debug(`---------------- ${url}`);}executeReq(url){return new Promise((resolve,reject)=>{resolve();});}executeResp(url){let solrRequest=new solr_http_request_1.SolrHttpRequest();return new Promise((resolve,reject)=>{solrRequest.postData(url,null,false).then(res=>{resolve(res);}).catch(err=>{logger_1.Log.error(this.constructor.name+' :: execute :: ',err);reject(err);});});}executeUrl(url){let solrRequest=new solr_http_request_1.SolrHttpRequest();return new Promise((resolve,reject)=>{solrRequest.postData(url,null,false).then(res=>{resolve(res);}).catch(err=>{logger_1.Log.error('executeUrl :: execute :: ',err);reject(err);});});}execute(transaction){let url=this.compileUrl();console.log('URL after Compile ::',url);let solrRequest=new solr_http_request_1.SolrHttpRequest();url=url+'solr/'+this.collection+const_1.Const.URL_SLASH;console.log('Collection SET AS ::',this.collection);console.log('>>> URL ::',url);return new Promise((resolve,reject)=>{let requestStr=transaction.compile();solrRequest.postData(url,null,false).then(res=>{logger_1.Log.info('execute :: ',res);let data=doc_parser_1.Convert.toDoc(res);console.log('DATA ::',data);}).catch(err=>{logger_1.Log.error(this.constructor.name+' :: execute :: ',err);});});}query(collection){let solrQuery=new solr_transaction_1.SolrTransaction(types_1.SolrRequestHandler.Select);this.collection=collection;return solrQuery;}}exports.SolrClient=SolrClient;